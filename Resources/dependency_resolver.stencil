/// This file is generated by BeaverDI
/// DO NOT EDIT!

{% for resolver in resolvers %}
// MARK: - {{resolver.targetTypeName}}

final class {{resolver.targetTypeName}}DependencyResolver: DependencyResolver {
  
  override func registerDependencies(in store: DependencyStore) {
    {% for registration in resolver.registrations %}
    store.register({{registration.abstractTypeName}}.self, scope: .{{registration.scope}}, builder: { dependencies in
      return {{registration.typeName}}.make{{registration.typeName}}(injecting: dependencies)
    })
    {% endfor %}
  }
}

// MARK: - Getters

extension {{resolver.targetTypeName}}DependencyResolver {
  {% for reference in resolver.references %}
  var {{reference.name}}: {{reference.typeName}} {
    return dependencies.resolve({{reference.typeName}}.self)
  }
  {% endfor %}
}

// MARK: - Builder

extension {% if resolver.enclosingTypeNames %}{{resolver.enclosingTypeNames|join: "."}}.{% endif %}{{resolver.targetTypeName}} {

  static func make{{resolver.targetTypeName}}(injecting parentDependencies: DependencyResolver) -> {{resolver.targetTypeName}} {
    let dependencies = {{resolver.targetTypeName}}DependencyResolver(parentDependencies)
    return {{resolver.targetTypeName}}(injecting: dependencies)
  }
}
{% endfor %}