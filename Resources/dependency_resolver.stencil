/// This file is generated by BeaverDI
/// DO NOT EDIT!

import BeaverDI
{% for resolver in resolvers %}
// MARK: - {{resolver.targetTypeName}}

final class {{resolver.targetTypeName}}DependencyContainer: DependencyContainer {

    init({% if not resolver.isRoot %}_ parent: DependencyContainer{% endif %}) {
        super.init({% if not resolver.isRoot %}parent{% endif %})
    }

    override func registerDependencies(in store: DependencyStore) {
        {% for registration in resolver.registrations %}
        store.register({{registration.abstractTypeName}}.self, scope: .{{registration.scope}}, builder: { dependencies in
            return {{registration.typeName}}.make{{registration.typeName}}(injecting: dependencies)
        }){% endfor %}
    }
}

protocol {{resolver.targetTypeName}}DependencyResolver {
    {% for reference in resolver.references %}
    var {{reference.name}}: {{reference.typeName}} { get }{% endfor %}
}

extension {{resolver.targetTypeName}}DependencyContainer: {{resolver.targetTypeName}}DependencyResolver {
    {% for reference in resolver.references %}
    var {{reference.name}}: {{reference.typeName}} {
        return resolve({{reference.typeName}}.self)
    }{% endfor %}
}

extension {% if resolver.enclosingTypeNames %}{{resolver.enclosingTypeNames|join: "."}}.{% endif %}{{resolver.targetTypeName}} {

    static func make{{resolver.targetTypeName}}({% if not resolver.isRoot %}injecting parentDependencies: DependencyContainer{% endif %}) -> {{resolver.targetTypeName}} {
        let dependencies = {{resolver.targetTypeName}}DependencyContainer({% if not resolver.isRoot %}parentDependencies{% endif %})
        return {{resolver.targetTypeName}}(injecting: dependencies)
    }
}
{% endfor %}