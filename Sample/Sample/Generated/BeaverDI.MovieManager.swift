/// This file is generated by BeaverDI
/// DO NOT EDIT!
import BeaverDI
// MARK: - MovieManager
final class MovieManagerDependencyContainer: DependencyContainer {
    init(parent: DependencyContainer) {
        super.init(parent)
    }
    override func registerDependencies(in store: DependencyStore) {
    }
}
protocol MovieManagerDependencyResolver {
    var movieAPI: APIProtocol { get }
}
extension MovieManagerDependencyContainer: MovieManagerDependencyResolver {
    var movieAPI: APIProtocol {
        return resolve(APIProtocol.self, name: "movieAPI")
    }
}
extension MovieManager {
    static func makeMovieManager(injecting parentDependencies: DependencyContainer) -> MovieManager {
        let dependencies = MovieManagerDependencyContainer(parent: parentDependencies)
        return MovieManager(injecting: dependencies)
    }
}
protocol MovieManagerDependencyInjectable {
    init(injecting dependencies: MovieManagerDependencyResolver)
}
extension MovieManager: MovieManagerDependencyInjectable {}