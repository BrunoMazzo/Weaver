/// This file is generated by BeaverDI
/// DO NOT EDIT!

import BeaverDI

// MARK: - ViewController

final class ViewControllerDependencyContainer: DependencyContainer {

    init(_ parent: DependencyContainer) {
        super.init(parent)
    }

    override func registerDependencies(in store: DependencyStore) {
        
        store.register(ViewControllerBis.self, scope: .graph, builder: { dependencies in
            return ViewControllerBis.makeViewControllerBis(injecting: dependencies)
        })
    }
}

protocol ViewControllerDependencyResolver {
    
    var viewControllerBis: ViewControllerBis { get }
    var appDelegate: AppDelegate { get }
}

extension ViewControllerDependencyContainer: ViewControllerDependencyResolver {
    
    var viewControllerBis: ViewControllerBis {
        return resolve(ViewControllerBis.self)
    }
    var appDelegate: AppDelegate {
        return resolve(AppDelegate.self)
    }
}

extension ViewController {

    static func makeViewController(injecting parentDependencies: DependencyContainer) -> ViewController {
        let dependencies = ViewControllerDependencyContainer(parentDependencies)
        return ViewController(injecting: dependencies)
    }
}
