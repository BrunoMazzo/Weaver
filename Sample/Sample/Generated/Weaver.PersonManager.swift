/// This file is generated by Weaver
/// DO NOT EDIT!
import Weaver
// MARK: - PersonManager
final class PersonManagerDependencyContainer: DependencyContainer {
    init(parent: DependencyContainer) {
        super.init(parent)
    }
    override func registerDependencies(in store: DependencyStore) {
    }
}
protocol PersonManagerDependencyResolver {
    var movieAPI: APIProtocol { get }
}
extension PersonManagerDependencyContainer: PersonManagerDependencyResolver {
    var movieAPI: APIProtocol {
        return resolve(APIProtocol.self, name: "movieAPI")
    }
}
extension PersonManager {
    static func makePersonManager(injecting parentDependencies: DependencyContainer) -> PersonManager {
        let dependencies = PersonManagerDependencyContainer(parent: parentDependencies)
        return PersonManager(injecting: dependencies)
    }
}
protocol PersonManagerDependencyInjectable {
    init(injecting dependencies: PersonManagerDependencyResolver)
}
extension PersonManager: PersonManagerDependencyInjectable {}